{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { StatusBar } from 'expo-status-bar';\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\n\nvar App = function (_React$Component) {\n  _inherits(App, _React$Component);\n\n  var _super = _createSuper(App);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _super.call(this, props);\n    _this.buttons = {\n      answer1: \"8 bits\",\n      answer2: \"16 bits\",\n      answer3: \"32 bits\",\n      answer4: \"12 bits\"\n    };\n    _this.styles = StyleSheet.create({\n      container: {\n        flex: 1,\n        backgroundColor: '#fff',\n        alignItems: 'center',\n        justifyContent: 'center'\n      },\n      answers: {\n        display: 'grid',\n        gridTemplateRows: 'repeat(2, 1fr)',\n        gridTemplateColumns: 'repeat(2, 1fr)',\n        gap: '50px',\n        padding: '30px'\n      },\n      question: {\n        fontSize: 32,\n        fontWeight: 'bold'\n      },\n      buttons: {\n        width: 500\n      }\n    });\n    _this.bytes = 4;\n    _this.styles = _this.styles.bind(_assertThisInitialized(_this));\n    _this.handleAnswer1 = _this.handleAnswer1.bind(_assertThisInitialized(_this));\n    _this.handleAnswer2 = _this.handleAnswer2.bind(_assertThisInitialized(_this));\n    _this.handleAnswer3 = _this.handleAnswer3.bind(_assertThisInitialized(_this));\n    _this.handleAnswer4 = _this.handleAnswer4.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      console.log(\"Component did mount\");\n    }\n  }, {\n    key: \"handleAnswer1\",\n    value: function handleAnswer1() {\n      console.log(\"answer 1 is selected\");\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(View, {\n        style: this.styles.container\n      }, React.createElement(Text, {\n        style: this.styles.question\n      }, \"How much bits are in \", this.bytes, \" bytes?\"), React.createElement(View, {\n        style: this.styles.answers\n      }, React.createElement(Button, {\n        id: this.buttons.answer1,\n        title: this.bytes * 2 + \" bits\",\n        onPress: this.handleAnswer1\n      }), React.createElement(Button, {\n        id: this.buttons.answer2,\n        title: this.bytes * 4 + \" bits\",\n        onPress: this.handleAnswer2\n      }), React.createElement(Button, {\n        id: this.buttons.answer3,\n        title: this.bytes * 8 + \" bits\",\n        onPress: this.handleAnswer3\n      }), React.createElement(Button, {\n        id: this.buttons.answer4,\n        title: this.bytes * 3 + \" bits\",\n        onPress: this.handleAnswer4\n      }), React.createElement(Button, {\n        style: this.styles.buttons,\n        title: \"Next\"\n      })), React.createElement(StatusBar, {\n        style: \"auto\"\n      }));\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nexport { App as default };","map":{"version":3,"sources":["/home/dexter/Development/Programming/web/games/questionaireRepository/App.js"],"names":["StatusBar","React","App","props","buttons","answer1","answer2","answer3","answer4","styles","StyleSheet","create","container","flex","backgroundColor","alignItems","justifyContent","answers","display","gridTemplateRows","gridTemplateColumns","gap","padding","question","fontSize","fontWeight","width","bytes","bind","handleAnswer1","handleAnswer2","handleAnswer3","handleAnswer4","console","log","Component"],"mappings":"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","sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport React from 'react';\nimport { StyleSheet, Button, Text, View } from 'react-native';\n\nexport default class App extends React.Component {\n\t\n\tconstructor(props){\n\t\tsuper(props);\n\t\t\n\t\tthis.buttons = {\n\t\t\tanswer1: \"8 bits\",\n\t\t\tanswer2: \"16 bits\",\n\t\t\tanswer3: \"32 bits\",\n\t\t\tanswer4: \"12 bits\",\n\t\t};\n\t\t\n\t\t\n\t\tthis.styles = StyleSheet.create({\n\t\t  container: {\n\t\t\tflex: 1,\n\t\t\tbackgroundColor: '#fff',\n\t\t\talignItems: 'center',\n\t\t\tjustifyContent: 'center',\n\t\t  },\n\t\t \n\t\t  answers: {\n\t\t\tdisplay: 'grid',\n\t\t\tgridTemplateRows: 'repeat(2, 1fr)',\n\t\t\tgridTemplateColumns: 'repeat(2, 1fr)',\n\t\t\tgap: '50px',\n\t\t\t\n\t\t\tpadding: '30px',\n\t\t  },\n\t\t  \n\t\t  question: {\n\t\t\t  fontSize: 32,\n\t\t\t  fontWeight: 'bold',\n\t\t  },\n\t\t  \n\t\t  buttons: {\n\t\t\twidth: 500,  \n\t\t  },\n\t\t});\n\t\t\n\t\tthis.bytes = 4;\n\t\tthis.styles = this.styles.bind(this);\n\t\tthis.handleAnswer1 = this.handleAnswer1.bind(this);\n\t\tthis.handleAnswer2 = this.handleAnswer2.bind(this);\n\t\tthis.handleAnswer3 = this.handleAnswer3.bind(this);\n\t\tthis.handleAnswer4 = this.handleAnswer4.bind(this);\n\t}\n\t\n\tcomponentDidMount() {\n\t\tconsole.log(\"Component did mount\");\n\t}\n\n\thandleAnswer1 () {\n\t\tconsole.log(\"answer 1 is selected\");\n\t\t\n\t}\n\t\n\t\n\trender () {\n\t\treturn (\n\t\t\t<View style={this.styles.container}>\n\t\t\t  <Text style={this.styles.question}>How much bits are in {this.bytes} bytes?</Text>\n\t\t\t  <View style={this.styles.answers}>\n\t\t\t\t<Button id={this.buttons.answer1} title={(this.bytes * 2) + \" bits\"} onPress={this.handleAnswer1} />\n\t\t\t\t<Button id={this.buttons.answer2} title={(this.bytes * 4) + \" bits\"} onPress={this.handleAnswer2} />\n\t\t\t\t<Button id={this.buttons.answer3} title={(this.bytes * 8) + \" bits\"} onPress={this.handleAnswer3} />\n\t\t\t\t<Button id={this.buttons.answer4} title={(this.bytes * 3) + \" bits\"} onPress={this.handleAnswer4} />\n\t\t\t\t<Button style={this.styles.buttons} title=\"Next\" />\n\t\t\t  </View>\n\t\t\t  <StatusBar style=\"auto\" />\n\t\t\t</View>\n\t\t  );\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}